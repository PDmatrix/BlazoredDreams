// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as url from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = 'http://localhost:5000'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|',
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError' = 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface CommentDto
 */
export interface CommentDto {
  /**
   *
   * @type {number}
   * @memberof CommentDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CommentDto
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof CommentDto
   */
  content?: string;
  /**
   *
   * @type {string}
   * @memberof CommentDto
   */
  date?: string;
}

/**
 *
 * @export
 * @interface CommentRequest
 */
export interface CommentRequest {
  /**
   *
   * @type {string}
   * @memberof CommentRequest
   */
  content?: string;
}

/**
 *
 * @export
 * @interface DreamDto
 */
export interface DreamDto {
  /**
   *
   * @type {number}
   * @memberof DreamDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof DreamDto
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof DreamDto
   */
  content?: string;
  /**
   *
   * @type {string}
   * @memberof DreamDto
   */
  date?: string;
}

/**
 *
 * @export
 * @interface DreamRequest
 */
export interface DreamRequest {
  /**
   *
   * @type {string}
   * @memberof DreamRequest
   */
  content?: string;
}

/**
 *
 * @export
 * @interface PageOfPostPreviewDto
 */
export interface PageOfPostPreviewDto {
  /**
   *
   * @type {number}
   * @memberof PageOfPostPreviewDto
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof PageOfPostPreviewDto
   */
  pageSize: number;
  /**
   *
   * @type {Array<PostPreviewDto>}
   * @memberof PageOfPostPreviewDto
   */
  records?: Array<PostPreviewDto>;
  /**
   *
   * @type {number}
   * @memberof PageOfPostPreviewDto
   */
  totalPages: number;
}

/**
 *
 * @export
 * @interface PostDto
 */
export interface PostDto {
  /**
   *
   * @type {number}
   * @memberof PostDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof PostDto
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof PostDto
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof PostDto
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof PostDto
   */
  tag?: string;
  /**
   *
   * @type {string}
   * @memberof PostDto
   */
  content?: string;
  /**
   *
   * @type {number}
   * @memberof PostDto
   */
  comments: number;
}

/**
 *
 * @export
 * @interface PostPreviewDto
 */
export interface PostPreviewDto {
  /**
   *
   * @type {number}
   * @memberof PostPreviewDto
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof PostPreviewDto
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof PostPreviewDto
   */
  title?: string;
  /**
   *
   * @type {number}
   * @memberof PostPreviewDto
   */
  comments: number;
  /**
   *
   * @type {string}
   * @memberof PostPreviewDto
   */
  excerpt?: string;
  /**
   *
   * @type {string}
   * @memberof PostPreviewDto
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof PostPreviewDto
   */
  tag?: string;
}

/**
 *
 * @export
 * @interface PostRequest
 */
export interface PostRequest {
  /**
   *
   * @type {string}
   * @memberof PostRequest
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof PostRequest
   */
  excerpt?: string;
  /**
   *
   * @type {number}
   * @memberof PostRequest
   */
  dreamId: number;
}

/**
 * A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
  [key: string]: any | any;

  /**
   * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be \"about:blank\".
   * @type {string}
   * @memberof ProblemDetails
   */
  type?: string;
  /**
   * A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4).
   * @type {string}
   * @memberof ProblemDetails
   */
  title?: string;
  /**
   * The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
   * @type {number}
   * @memberof ProblemDetails
   */
  status?: number;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   * @type {string}
   * @memberof ProblemDetails
   */
  detail?: string;
  /**
   * A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
   * @type {string}
   * @memberof ProblemDetails
   */
  instance?: string;
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} postId
     * @param {CommentRequest} commentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreate(postId: number, commentRequest: CommentRequest, options: any = {}): RequestArgs {
      // verify required parameter 'postId' is not null or undefined
      if (postId === null || postId === undefined) {
        throw new RequiredError(
          'postId',
          'Required parameter postId was null or undefined when calling commentsCreate.',
        );
      }
      // verify required parameter 'commentRequest' is not null or undefined
      if (commentRequest === null || commentRequest === undefined) {
        throw new RequiredError(
          'commentRequest',
          'Required parameter commentRequest was null or undefined when calling commentsCreate.',
        );
      }
      const localVarPath = `/api/posts/{postId}/comment`.replace(
        `{${'postId'}}`,
        encodeURIComponent(String(postId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(commentRequest || {})
        : commentRequest || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {string} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsDelete(id: number, postId: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling commentsDelete.',
        );
      }
      // verify required parameter 'postId' is not null or undefined
      if (postId === null || postId === undefined) {
        throw new RequiredError(
          'postId',
          'Required parameter postId was null or undefined when calling commentsDelete.',
        );
      }
      const localVarPath = `/api/posts/{postId}/comment/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'postId'}}`, encodeURIComponent(String(postId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsGetAll(postId: number, options: any = {}): RequestArgs {
      // verify required parameter 'postId' is not null or undefined
      if (postId === null || postId === undefined) {
        throw new RequiredError(
          'postId',
          'Required parameter postId was null or undefined when calling commentsGetAll.',
        );
      }
      const localVarPath = `/api/posts/{postId}/comment`.replace(
        `{${'postId'}}`,
        encodeURIComponent(String(postId)),
      );
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {string} postId
     * @param {CommentRequest} commentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsUpdate(
      id: number,
      postId: string,
      commentRequest: CommentRequest,
      options: any = {},
    ): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling commentsUpdate.',
        );
      }
      // verify required parameter 'postId' is not null or undefined
      if (postId === null || postId === undefined) {
        throw new RequiredError(
          'postId',
          'Required parameter postId was null or undefined when calling commentsUpdate.',
        );
      }
      // verify required parameter 'commentRequest' is not null or undefined
      if (commentRequest === null || commentRequest === undefined) {
        throw new RequiredError(
          'commentRequest',
          'Required parameter commentRequest was null or undefined when calling commentsUpdate.',
        );
      }
      const localVarPath = `/api/posts/{postId}/comment/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'postId'}}`, encodeURIComponent(String(postId)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(commentRequest || {})
        : commentRequest || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} postId
     * @param {CommentRequest} commentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreate(
      postId: number,
      commentRequest: CommentRequest,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).commentsCreate(
        postId,
        commentRequest,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {string} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsDelete(
      id: number,
      postId: string,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).commentsDelete(
        id,
        postId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsGetAll(
      postId: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommentDto>> {
      const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).commentsGetAll(
        postId,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {string} postId
     * @param {CommentRequest} commentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsUpdate(
      id: number,
      postId: string,
      commentRequest: CommentRequest,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = CommentsApiAxiosParamCreator(configuration).commentsUpdate(
        id,
        postId,
        commentRequest,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {number} postId
     * @param {CommentRequest} commentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsCreate(postId: number, commentRequest: CommentRequest, options?: any) {
      return CommentsApiFp(configuration).commentsCreate(postId, commentRequest, options)(
        axios,
        basePath,
      );
    },
    /**
     *
     * @param {number} id
     * @param {string} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsDelete(id: number, postId: string, options?: any) {
      return CommentsApiFp(configuration).commentsDelete(id, postId, options)(axios, basePath);
    },
    /**
     *
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsGetAll(postId: number, options?: any) {
      return CommentsApiFp(configuration).commentsGetAll(postId, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {string} postId
     * @param {CommentRequest} commentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commentsUpdate(id: number, postId: string, commentRequest: CommentRequest, options?: any) {
      return CommentsApiFp(configuration).commentsUpdate(id, postId, commentRequest, options)(
        axios,
        basePath,
      );
    },
  };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
  /**
   *
   * @param {number} postId
   * @param {CommentRequest} commentRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public commentsCreate(postId: number, commentRequest: CommentRequest, options?: any) {
    return CommentsApiFp(this.configuration).commentsCreate(postId, commentRequest, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {number} id
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public commentsDelete(id: number, postId: string, options?: any) {
    return CommentsApiFp(this.configuration).commentsDelete(id, postId, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {number} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public commentsGetAll(postId: number, options?: any) {
    return CommentsApiFp(this.configuration).commentsGetAll(postId, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {number} id
   * @param {string} postId
   * @param {CommentRequest} commentRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public commentsUpdate(id: number, postId: string, commentRequest: CommentRequest, options?: any) {
    return CommentsApiFp(this.configuration).commentsUpdate(id, postId, commentRequest, options)(
      this.axios,
      this.basePath,
    );
  }
}

/**
 * DreamsApi - axios parameter creator
 * @export
 */
export const DreamsApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {DreamRequest} dreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsCreate(dreamRequest: DreamRequest, options: any = {}): RequestArgs {
      // verify required parameter 'dreamRequest' is not null or undefined
      if (dreamRequest === null || dreamRequest === undefined) {
        throw new RequiredError(
          'dreamRequest',
          'Required parameter dreamRequest was null or undefined when calling dreamsCreate.',
        );
      }
      const localVarPath = `/api/Dreams`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(dreamRequest || {})
        : dreamRequest || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsDelete(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling dreamsDelete.',
        );
      }
      const localVarPath = `/api/Dreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsGetAll(page?: number, options: any = {}): RequestArgs {
      const localVarPath = `/api/Dreams`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsGetById(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling dreamsGetById.',
        );
      }
      const localVarPath = `/api/Dreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {DreamRequest} dreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsUpdate(id: number, dreamRequest: DreamRequest, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling dreamsUpdate.',
        );
      }
      // verify required parameter 'dreamRequest' is not null or undefined
      if (dreamRequest === null || dreamRequest === undefined) {
        throw new RequiredError(
          'dreamRequest',
          'Required parameter dreamRequest was null or undefined when calling dreamsUpdate.',
        );
      }
      const localVarPath = `/api/Dreams/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(dreamRequest || {})
        : dreamRequest || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DreamsApi - functional programming interface
 * @export
 */
export const DreamsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {DreamRequest} dreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsCreate(
      dreamRequest: DreamRequest,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DreamsApiAxiosParamCreator(configuration).dreamsCreate(
        dreamRequest,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsDelete(
      id: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DreamsApiAxiosParamCreator(configuration).dreamsDelete(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsGetAll(
      page?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DreamDto>> {
      const localVarAxiosArgs = DreamsApiAxiosParamCreator(configuration).dreamsGetAll(
        page,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsGetById(
      id: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DreamDto> {
      const localVarAxiosArgs = DreamsApiAxiosParamCreator(configuration).dreamsGetById(
        id,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {DreamRequest} dreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsUpdate(
      id: number,
      dreamRequest: DreamRequest,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DreamsApiAxiosParamCreator(configuration).dreamsUpdate(
        id,
        dreamRequest,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DreamsApi - factory interface
 * @export
 */
export const DreamsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {DreamRequest} dreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsCreate(dreamRequest: DreamRequest, options?: any) {
      return DreamsApiFp(configuration).dreamsCreate(dreamRequest, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsDelete(id: number, options?: any) {
      return DreamsApiFp(configuration).dreamsDelete(id, options)(axios, basePath);
    },
    /**
     *
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsGetAll(page?: number, options?: any) {
      return DreamsApiFp(configuration).dreamsGetAll(page, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsGetById(id: number, options?: any) {
      return DreamsApiFp(configuration).dreamsGetById(id, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {DreamRequest} dreamRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dreamsUpdate(id: number, dreamRequest: DreamRequest, options?: any) {
      return DreamsApiFp(configuration).dreamsUpdate(id, dreamRequest, options)(axios, basePath);
    },
  };
};

/**
 * DreamsApi - object-oriented interface
 * @export
 * @class DreamsApi
 * @extends {BaseAPI}
 */
export class DreamsApi extends BaseAPI {
  /**
   *
   * @param {DreamRequest} dreamRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DreamsApi
   */
  public dreamsCreate(dreamRequest: DreamRequest, options?: any) {
    return DreamsApiFp(this.configuration).dreamsCreate(dreamRequest, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DreamsApi
   */
  public dreamsDelete(id: number, options?: any) {
    return DreamsApiFp(this.configuration).dreamsDelete(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DreamsApi
   */
  public dreamsGetAll(page?: number, options?: any) {
    return DreamsApiFp(this.configuration).dreamsGetAll(page, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DreamsApi
   */
  public dreamsGetById(id: number, options?: any) {
    return DreamsApiFp(this.configuration).dreamsGetById(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} id
   * @param {DreamRequest} dreamRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DreamsApi
   */
  public dreamsUpdate(id: number, dreamRequest: DreamRequest, options?: any) {
    return DreamsApiFp(this.configuration).dreamsUpdate(id, dreamRequest, options)(
      this.axios,
      this.basePath,
    );
  }
}

/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsCreate(postRequest: PostRequest, options: any = {}): RequestArgs {
      // verify required parameter 'postRequest' is not null or undefined
      if (postRequest === null || postRequest === undefined) {
        throw new RequiredError(
          'postRequest',
          'Required parameter postRequest was null or undefined when calling postsCreate.',
        );
      }
      const localVarPath = `/api/Posts`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(postRequest || {})
        : postRequest || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsDelete(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling postsDelete.',
        );
      }
      const localVarPath = `/api/Posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGetAll(page?: number, options: any = {}): RequestArgs {
      const localVarPath = `/api/Posts`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGetById(id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling postsGetById.',
        );
      }
      const localVarPath = `/api/Posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsUpdate(id: number, postRequest: PostRequest, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling postsUpdate.',
        );
      }
      // verify required parameter 'postRequest' is not null or undefined
      if (postRequest === null || postRequest === undefined) {
        throw new RequiredError(
          'postRequest',
          'Required parameter postRequest was null or undefined when calling postsUpdate.',
        );
      }
      const localVarPath = `/api/Posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization =
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(postRequest || {})
        : postRequest || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsCreate(
      postRequest: PostRequest,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsCreate(
        postRequest,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsDelete(
      id: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsDelete(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGetAll(
      page?: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfPostPreviewDto> {
      const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsGetAll(page, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGetById(
      id: number,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDto> {
      const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsGetById(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsUpdate(
      id: number,
      postRequest: PostRequest,
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PostsApiAxiosParamCreator(configuration).postsUpdate(
        id,
        postRequest,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsCreate(postRequest: PostRequest, options?: any) {
      return PostsApiFp(configuration).postsCreate(postRequest, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsDelete(id: number, options?: any) {
      return PostsApiFp(configuration).postsDelete(id, options)(axios, basePath);
    },
    /**
     *
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGetAll(page?: number, options?: any) {
      return PostsApiFp(configuration).postsGetAll(page, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGetById(id: number, options?: any) {
      return PostsApiFp(configuration).postsGetById(id, options)(axios, basePath);
    },
    /**
     *
     * @param {number} id
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsUpdate(id: number, postRequest: PostRequest, options?: any) {
      return PostsApiFp(configuration).postsUpdate(id, postRequest, options)(axios, basePath);
    },
  };
};

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
  /**
   *
   * @param {PostRequest} postRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsCreate(postRequest: PostRequest, options?: any) {
    return PostsApiFp(this.configuration).postsCreate(postRequest, options)(
      this.axios,
      this.basePath,
    );
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsDelete(id: number, options?: any) {
    return PostsApiFp(this.configuration).postsDelete(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} [page]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsGetAll(page?: number, options?: any) {
    return PostsApiFp(this.configuration).postsGetAll(page, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsGetById(id: number, options?: any) {
    return PostsApiFp(this.configuration).postsGetById(id, options)(this.axios, this.basePath);
  }

  /**
   *
   * @param {number} id
   * @param {PostRequest} postRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsUpdate(id: number, postRequest: PostRequest, options?: any) {
    return PostsApiFp(this.configuration).postsUpdate(id, postRequest, options)(
      this.axios,
      this.basePath,
    );
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSignIn(options: any = {}): RequestArgs {
      const localVarPath = `/api/Users`;
      const localVarUrlObj = url.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication JWT required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? configuration.apiKey('Authorization')
            : configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarUrlObj.query = Object.assign(
        {},
        localVarUrlObj.query,
        localVarQueryParameter,
        options.query,
      );
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSignIn(
      options?: any,
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersSignIn(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url,
        });
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersSignIn(options?: any) {
      return UsersApiFp(configuration).usersSignIn(options)(axios, basePath);
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersSignIn(options?: any) {
    return UsersApiFp(this.configuration).usersSignIn(options)(this.axios, this.basePath);
  }
}
